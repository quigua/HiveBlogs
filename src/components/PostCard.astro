---
import { getCollection } from 'astro:content';
import allCommunities from '../data/all_communities.json';

export interface Props {
  post: any; // Pasaremos el objeto post completo
  communityId?: string; // Opcional: para enlaces de posts de comunidad
}

const { post, communityId } = Astro.props;
console.log('PostCard received:', { post, communityId });

// Crear un mapa de comunidades para búsqueda rápida
const communityMap = new Map(allCommunities.map(comm => [comm.name, comm.title]));

let title, description, author, permlink, category, created, image, tags, hbdPayout, votesCount, commentsCount;

// Determinar la URL canónica del post
let postLink;

// Determinar si el post viene de Astro.glob (con frontmatter) o directamente de la API
if (post.data) {
  // Caso: Post de getCollection (posts de categoría)
  ({
    title = 'Sin título',
    description = 'Sin descripción disponible.',
    author = 'Usuario Desconocido',
    permlink = 'no-permlink-found',
    category = 'General',
    created,
    imageUrl: image = null,
    tags = [],
    hbdPayout = '0.000 HBD',
    votesCount = 0,
    commentsCount = 0,
  } = post.data);
  // Obtener el nombre legible de la comunidad para posts de colección
  category = communityMap.get(category) || category || 'General';

  // Lógica para postLink cuando viene de post.data (getCollection)
  if (post.data.type === 'reblogged') {
    postLink = `/posts/reblogged/${post.data.permlink}`;
  } else if (post.data.category && post.data.category.startsWith('hive-')) {
    postLink = `/comunidades/${post.data.category}/${post.data.author}/${post.data.permlink}`;
  } else {
    const categorySlug = post.data.category.toLowerCase().replace(/ /g, '-'); // Usar post.data.category directamente para mantener el '@'
    const subcategorySlug = post.data.subcategory ? `/${post.data.subcategory.toLowerCase().replace(/ /g, '-')}` : '';
    postLink = `/posts/${categorySlug}${subcategorySlug}/${post.data.permlink}`;
  }

} else if (post.frontmatter) {
  // Caso: Post de Astro.glob (originales/reblogueados)
  ({
    title = 'Sin título',
    description = 'Sin descripción disponible.',
    author = 'Usuario Desconocido',
    permlink = 'no-permlink-found',
    category = 'General',
    created,
    image = null,
    tags = [],
    url: originalUrl = '#',
    hbdPayout = '0.000 HBD',
    votesCount = 0,
    commentsCount = 0,
  } = post.frontmatter);

  // Lógica para postLink cuando viene de post.frontmatter (Astro.glob)
  if (post.frontmatter.category && post.frontmatter.category.startsWith('hive-')) {
    postLink = `/comunidades/${post.frontmatter.category}/${post.frontmatter.author}/${post.frontmatter.permlink}`;
  } else if (post.frontmatter.type === 'reblogged') {
    postLink = `/posts/reblogged/${post.frontmatter.permlink}`;
  } else {
    const categorySlug = category.toLowerCase().replace(/ /g, '-');
    const subcategorySlug = post.frontmatter.subcategory ? `/${post.frontmatter.subcategory.toLowerCase().replace(/ /g, '-')}` : '';
    postLink = `/posts/${categorySlug}${subcategorySlug}/${post.frontmatter.permlink}`;
  }

} else {
  // Caso: Post directo de la API de Hive (posts de comunidad)
  title = post.title || 'Sin título';
  const cleanBody = post.body.replace(/!\[.*?\]\(.*?\)|<img[^>]+src="[^"]+"[^>]*>|(https?:[^\s]+\.(?:jpg|jpeg|png|gif|webp|svg))|<\/?[^>]+(>|$)/gi, '');
  description = cleanBody ? cleanBody.substring(0, 150).replace(/\n/g, ' ') + '...' : 'Sin descripción disponible.';
  author = post.author || 'Usuario Desconocido';
  permlink = post.permlink || 'no-permlink-found';
  created = post.created;
  const originalUrl = post.url || '#';

  // Obtener el nombre legible de la comunidad
  category = communityMap.get(post.category) || post.category || 'General';

  // Parsear json_metadata para imagen y tags
  let metadata = {};
  try {
    metadata = typeof post.json_metadata === 'string' ? JSON.parse(post.json_metadata) : post.json_metadata;
    console.log('PostCard: json_metadata for API post:', metadata);
  } catch (e) {
    console.warn(`Advertencia: No se pudo parsear json_metadata para el post ${post.permlink}:`, e);
  }
  image = metadata.image && metadata.image.length > 0 ? metadata.image[0] : null;
  console.log('PostCard: Extracted image from metadata for API post:', image);

  // If no image from metadata, try to extract the first image from the post body
  if (!image && post.body) {
    // Regex to find Markdown images: ![alt](url)
    const markdownImageRegex = /!\[.*?\]\((https?:[^)]+\.(?:jpg|jpeg|png|gif|webp|svg))\)/i;
    // Regex to find HTML images: <img[^>]+src="url">
    const htmlImageRegex = /<img[^>]+src=["\\](https?:[^"\\]+\.(?:jpg|jpeg|png|gif|webp|svg))["\\][^>]*>/i;
    // Regex to find direct image URLs in text
    const directImageUrlRegex = /(https?:[^\s]+\.(?:jpg|jpeg|png|gif|webp|svg))/i;

    let match;

    // Try Markdown image first
    match = post.body.match(markdownImageRegex);
    if (match && match[1]) {
      image = match[1];
    } else {
      // If no Markdown image, try HTML image
      match = post.body.match(htmlImageRegex);
      if (match && match[1]) {
        image = match[1];
      } else {
        // If no HTML image, try direct URL in text
        match = post.body.match(directImageUrlRegex);
        if (match && match[1]) {
          image = match[1];
        }
      }
    }
    console.log('PostCard: Extracted image from body for API post:', image);
  }

  tags = metadata.tags || [];

  // Calcular hbdPayout, votesCount, commentsCount para posts de la API
  hbdPayout = post.pending_payout_value || post.total_payout_value || '0.000 HBD';
  votesCount = post.active_votes ? post.active_votes.length : 0;
  commentsCount = post.children || 0;

  // Lógica para postLink cuando viene directamente de la API
  postLink = communityId
    ? `/comunidades/${communityId}/${author}/${permlink}`
    : originalUrl; // Fallback to original Hive URL if no communityId
}

// Formatear la fecha de creación para una visualización amigable
const formattedDate = created ? new Date(created).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' }) : 'Fecha desconocida';

// Construir la URL del avatar directamente
const avatarUrl = `https://images.hive.blog/u/${author}/avatar`;

// Mapeo a las variables de display usadas en el HTML para claridad
const displayTitle = title;
const displayDate = formattedDate;
const displayAuthor = author;
const displayImageUrl = image || '/placeholder-post.jpg';
const displayExcerpt = description;
const displayCategory = category;
const displayTags = tags;

// Las propiedades de lectura, votos, HBD y comentarios ya vienen directamente del frontmatter o se calculan
const displayReads = 0; // Reads (lecturas) no es proporcionado por Hive directamente
const displayVotes = votesCount;
const displayHbdPayout = hbdPayout;
const displayComments = commentsCount;
console.log('PostCard - displayVotes:', displayVotes);
---

<div class="post-card">
  <a href={postLink} class="post-image-link">
    <img src={displayImageUrl} alt={displayTitle} class="post-thumbnail" />
  </a>
  <div class="post-content">
    <div class="post-meta-top">
      <span class="post-category">{displayCategory}</span>
      <span class="post-reads">{displayReads} Lecturas</span>
    </div>
    <a href={postLink} class="post-title-link">
      <h3>{displayTitle}</h3>
    </a>
    <p class="post-excerpt">{displayExcerpt}</p>
    <div class="post-meta-bottom">
      <img src={avatarUrl} alt={`${displayAuthor}'s avatar`} class="post-author-avatar" />
      <span class="post-author"><a href="#">@{displayAuthor}</a></span>
      <span class="post-date">{displayDate}</span>
    </div>
    <div class="post-actions">
      <span class="action-item">
        <span class="icon">👍</span> {displayVotes} Votos
      </span>
      <span class="action-item">
        <span class="icon">💰</span> {displayHbdPayout}
      </span>
      <span class="action-item">
        <span class="icon">💬</span> {displayComments} Comentarios
      </span>
    </div>
    <div class="post-tags">
      {displayTags.slice(0, 3).map(tag => (
        <a href="#" class="tag">#{tag}</a>
      ))}
    </div>
  </div>
</div>