---
import Layout from '../../layouts/Layout.astro';
import PostCard from '../../components/PostCard.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import { getCollection } from 'astro:content';
import { SITE_INFO, MAIN_CATEGORIES, SUBCATEGORIES } from '../../config/site'; // Import SUBCATEGORIES

export async function getStaticPaths() {
  const allPosts = await getCollection('blog');
  const paths = [];

  allPosts.forEach(post => {
    const category = post.data.category;
    const subcategory = post.data.subcategory; // Assuming subcategory exists in frontmatter

    const categorySlug = category.toLowerCase().replace(/ /g, '-'); // Keep this consistent with how you want the URL segment
    let slugArray = [categorySlug];

    if (subcategory) {
      const subcategorySlug = subcategory.toLowerCase().replace(/ /g, '-');
      slugArray.push(subcategorySlug);
    }

    paths.push({
      params: { slug: slugArray },
    });
  });

  // Ensure unique paths
  const uniquePaths = Array.from(new Set(paths.map(p => JSON.stringify(p)))).map(p => JSON.parse(p));

  console.log('Generated category paths:', uniquePaths); // For debugging
  return uniquePaths;
}

const { slug } = Astro.params; // slug will be an array, e.g., ['splinterlands', 'batallas-y-estrategias']

const allPosts = await getCollection('blog');

// Filter posts based on the slug array
const categoryPosts = allPosts.filter(post => {
  const postCategorySlug = post.data.category.toLowerCase().replace(/ /g, '-');
  const postSubcategorySlug = post.data.subcategory ? post.data.subcategory.toLowerCase().replace(/ /g, '-') : undefined;

  if (slug.length === 1) {
    // Matching a top-level category
    return postCategorySlug === slug[0] && !postSubcategorySlug; // Only show posts directly under this category
  } else if (slug.length === 2) {
    // Matching a subcategory
    return postCategorySlug === slug[0] && postSubcategorySlug === slug[1];
  }
  return false;
});

// Get the display name for the category from SITE_INFO.locales
const currentLang = SITE_INFO.language; // Assuming default language for category pages
const currentLocale = SITE_INFO.locales[currentLang];

// Map category slug back to display name using MAIN_CATEGORIES and currentLocale
let displayCategoryName = '';
let displaySubcategoryName = '';

// Determine display names based on slug
if (slug.length > 0) {
  const mainCategoryKey = Object.keys(currentLocale).find(key => {
    const translatedValue = currentLocale[key];
    return translatedValue && translatedValue.toLowerCase().replace(/ /g, '-').replace(/@/g, '') === slug[0];
  });
  if (mainCategoryKey) {
    displayCategoryName = currentLocale[mainCategoryKey];
  } else {
    // Fallback if not found in locale, use slug directly
    displayCategoryName = slug[0].replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  }

  if (slug.length === 2) {
    // Find subcategory display name
    const subcategoryList = SUBCATEGORIES[displayCategoryName] || []; // Get subcategories for the main category
    const subcategoryKey = subcategoryList.find(sub => sub.toLowerCase().replace(/ /g, '-') === slug[1]);
    if (subcategoryKey) {
      displaySubcategoryName = subcategoryKey;
    } else {
      displaySubcategoryName = slug[1].replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    }
  }
}

const breadcrumbs = [
  { label: currentLocale.home, href: '/' },
  { label: currentLocale.categories, href: '/temas' },
];

if (displayCategoryName) {
  breadcrumbs.push({ label: displayCategoryName, href: `/temas/${slug[0]}` });
}
if (displaySubcategoryName) {
  breadcrumbs.push({ label: displaySubcategoryName, href: `/temas/${slug[0]}/${slug[1]}` });
}

---

<Layout title={`Posts en ${displaySubcategoryName || displayCategoryName}`}>
  <Fragment slot="breadcrumbs">
    <Breadcrumbs items={breadcrumbs} />
  </Fragment>
  <main class="container">
    <h1>Posts en {displaySubcategoryName || displayCategoryName}</h1>

    <div class="posts-grid">
      {
        categoryPosts.length > 0 ? (
          categoryPosts.map(post => (
            <PostCard post={post} />
          ))
        ) : (
          <p>No se encontraron posts para esta categor√≠a.</p>
        )
      }
    </div>
  </main>
</Layout>

<style>
  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 30px;
    margin-top: 20px;
  }
</style>