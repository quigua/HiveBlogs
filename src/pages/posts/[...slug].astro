---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import CommentCard from '../../components/CommentCard.astro';
import { SITE_INFO } from '../../config/site';
import { getPostComments, condenser_api_get_content } from 'hiveblogkit';

export const prerender = true;

export async function getStaticPaths() {
  const allPosts = await getCollection('blog');

  return allPosts.map((post) => {
    return {
      params: {
        slug: post.slug,
      },
      props: {
        post,
      },
    };
  });
}

const { post } = Astro.props;

const { title, author, created, description, imageUrl, permlink } = post.data;

// Formatear la fecha
const formattedDate = created ? new Date(created).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' }) : 'Fecha desconocida';

let comments = [];
let errorMessage = null;

// Fetch comments for the post
try {
  comments = await getPostComments(author, permlink);
  if (!comments) {
    console.warn(`No comments found for ${author}/${permlink} or an error occurred.`);
    comments = []; // Ensure comments is an empty array if null
  }
} catch (error) {
  console.error(`Error fetching comments for post ${permlink}:`, error);
  errorMessage = "Error al cargar los comentarios.";
}

function sanitizeHtml(html) {
  if (!html) return '';
  return html.replace(/<script\b[^<]*(?:(?!<\/script>)[^<]*)*<\/script>/gi, '')
             .replace(/on\w+=["'][^"']*["']/gi, '');
}

const sanitizedBody = sanitizeHtml(post.body); // Siempre llamar con un processedBody definido
---

<Layout title={title} description={description || SITE_INFO.description}>
  <article class="post-detail-container">
    {imageUrl && <img src={imageUrl} alt={title} class="post-detail-image" />}
    <h1 class="post-detail-title">{title}</h1>
    <div class="post-detail-meta">
      <span>Por <a href="#">@{author}</a></span>
      <span> el {formattedDate}</span>
    </div>
    <div class="post-content-body">
      {/* Aqu√≠ inyectamos el contenido Markdown del post */}
      <Fragment set:html={sanitizedBody} />
    </div>
  </article>

  {comments && comments.length > 0 && (
    <div class="post-detail-container">
      <section class="post-comments-section">
        <h2>Comentarios ({comments.length})</h2>
        <div class="comments-list">
          {comments.map((comment) => (
            <CommentCard comment={comment} isNested={false} />
          ))}
        </div>
      </section>
    </div>
  )}
</Layout>
