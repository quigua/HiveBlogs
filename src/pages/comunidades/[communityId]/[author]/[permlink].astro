---
import { condenser_api_get_content, getPostComments } from 'hiveblogkit';
import { marked } from 'marked';
import Layout from '../../../../layouts/Layout.astro'; // Import Layout
import CommentCard from '/src/components/CommentCard.astro';
import Breadcrumbs from '../../../../components/Breadcrumbs.astro';
import { SITE_INFO } from '../../../../config/site';
import allCommunitiesData from '../../../../data/all_communities.json';

export async function getStaticPaths() {
  return [];
}

const { communityId, author, permlink } = Astro.params;

let post = null;
let errorMessage = null;

let processedBody = '';
let comments = [];

function replaceImageUrlsWithImgTags(htmlContent) {
  if (!htmlContent) return '';
  const imageUrlRegex = /(?<!src=")(?<!href=")(?<!src= ")(?<!href= ")(https?:[^\s]+\.(?:jpg|jpeg|png|gif|webp|svg))/gi;
  return htmlContent.replace(imageUrlRegex, (url) => `<img src="${url}" alt="Imagen cargada desde la URL">`);
}

try {
  const response = await condenser_api_get_content(author, permlink);
  if (response && response.result) {
    post = response.result;

    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
    const postDate = new Date(post.created);

    if (postDate < sevenDaysAgo) {
      errorMessage = "Este post es demasiado antiguo para ser mostrado.";
      post = null; 
    } else {
      // Process Markdown to HTML
      let tempBody = marked(post.body);
      processedBody = replaceImageUrlsWithImgTags(tempBody);

      // Fetch comments for the post
      comments = await getPostComments(author, permlink);
      if (!comments) {
        console.warn(`No comments found for ${author}/${permlink} or an error occurred.`);
        comments = []; // Ensure comments is an empty array if null
      }
    }

  } else {
    errorMessage = "Post no encontrado o error al cargar.";
  }
} catch (error) {
  console.error(`Error fetching post ${permlink} from community ${communityId}:`, error);
  errorMessage = "Error al cargar el post.";
}

function sanitizeHtml(html) {
  if (!html) return '';
  return html.replace(/<script\b[^<]*(?:(?!<\/script>)[^<]*)*<\/script>/gi, '')
             .replace(/on\w+=["'][^"']*["']/gi, '');
}

const sanitizedBody = post ? sanitizeHtml(processedBody) : '';

const url = new URL(Astro.request.url);
const langParam = url.searchParams.get('lang');
const currentLang = langParam && SITE_INFO.locales[langParam] ? langParam : SITE_INFO.language;
const currentLocale = SITE_INFO.locales[currentLang];

const communityTitle = allCommunitiesData.find(comm => comm.name === communityId)?.title || communityId;

const breadcrumbs = [
  { label: currentLocale.home, href: '/' },
  { label: currentLocale.communities, href: '/comunidades' },
  { label: communityTitle, href: `/comunidades/${communityId}` },
  { label: post ? post.title : 'Post', href: `#` }
];
---

<Layout title={post ? post.title : 'Post no encontrado'} description={post ? post.description : ''}>
  <Fragment slot="breadcrumbs">
    <Breadcrumbs items={breadcrumbs} />
  </Fragment>
  <article class="post-detail-container">
    {post && post.image && <img src={post.image} alt={post.title} class="post-detail-image" />}
    <h1 class="post-detail-title">{post ? post.title : ''}</h1>
    <div class="post-detail-meta">
      <span>Por <a href="#">@{post ? post.author : ''}</a></span>
      <span> el {post ? new Date(post.created).toLocaleDateString() : ''}</span>
    </div>
    <div class="post-content-body" set:html={sanitizedBody}></div>
  </article>

  {comments && comments.length > 0 && (
    <div class="post-detail-container">
      <section class="post-comments-section">
        <h2>Comentarios ({comments.length})</h2>
        <div class="comments-list">
          {comments.map((comment) => (
            <CommentCard comment={comment} isNested={false} />
          ))}
        </div>
      </section>
    </div>
  )}

  <p><a href={`/comunidades/${communityId}`}>Volver a la Comunidad</a></p>